package de.thb.dim.pizzaProntoTest;import static org.junit.jupiter.api.Assertions.assertThrows;import static org.junit.jupiter.api.Assertions.assertTrue;import java.io.File;import java.io.FileNotFoundException;import java.io.FileWriter;import java.util.ArrayList;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import org.junit.jupiter.api.Assertions;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import de.thb.dim.pizzaPronto.businessObjects.io.MenuImporter;import de.thb.dim.pizzaPronto.valueObjects.DessertVO;import de.thb.dim.pizzaPronto.valueObjects.DishVO;import de.thb.dim.pizzaPronto.valueObjects.MenuVO;import de.thb.dim.pizzaPronto.valueObjects.PastaVO;import de.thb.dim.pizzaPronto.valueObjects.PizzaVO;import java.io.IOException;import java.io.Writer;/** * IO-KLassen werden getestet. *  * Zum Testen werden spezielle Assert-Befehle und die Reflection-API eingesetzt * <br> *  * @author Gabriele Schmidt * @version 1.0 8.05.2015 */public class JUnitTestIOMenuImporter {	private static MenuVO myMenu;	private static MenuVO readMenu;	private static String file = "test/myLittleTestMenu.json";	@BeforeEach	public void initEach() { 		ArrayList<DishVO> dishes = new ArrayList<DishVO>();		String[] ingredients;		DessertVO dessert;		MenuWriter menuWriter;		ingredients = new String[] { "Schinken", "Spinat", "Champignon", "Ei" };		dishes.add(new PizzaVO(30, "Popeye", ingredients, 7.90f, 1));		dishes.add(new PizzaVO(30, "Popeye", ingredients, 8.90f, 2));		ingredients = new String[] { "Schinken", "Ananas", "Champignon" };		dishes.add(new PizzaVO(31, "Hawaii", ingredients, 5.80f, 1));		dishes.add(new PizzaVO(31, "Hawaii", ingredients, 7.40f, 2));		ingredients = new String[] { "Thunfisch", "Paprika", "Zucchini" };		dishes.add(new PizzaVO(33, "Tonno", ingredients, 5.80f, 1));		dishes.add(new PizzaVO(33, "Tonno", ingredients, 7.40f, 2));		// further dishes		ingredients = new String[] { "Schinken", "Salami", "Zwiebeln", "Ei" };		dishes.add(new PizzaVO(34, "Prima", ingredients, 7.00f, 1));		dishes.add(new PizzaVO(34, "Prima", ingredients, 8.90f, 2));		ingredients = new String[] { "Tomatensauce" };		dishes.add(new PastaVO(11, "Napoli", ingredients, 5.60f, 4));		dishes.add(new PastaVO(11, "Napoli", ingredients, 5.60f, 5));		dishes.add(new PastaVO(11, "Napoli", ingredients, 5.60f, 6));		ingredients = new String[] { "Hackfleischsauce" };		dishes.add(new PastaVO(12, "Bolognese", ingredients, 6.40f, 4));		dishes.add(new PastaVO(12, "Bolognese", ingredients, 6.40f, 5));		dishes.add(new PastaVO(12, "Bolognese", ingredients, 6.40f, 6));		ingredients = new String[] { "Schinken", "Sahne" };		dishes.add(new PastaVO(13, "alla Panna", ingredients, 6.40f, 4));		dishes.add(new PastaVO(13, "alla Panna", ingredients, 6.40f, 5));		dishes.add(new PastaVO(13, "alla Panna", ingredients, 6.40f, 6));		ingredients = new String[] { "Mandeln" };		dessert = new DessertVO(21, "Hausgemachter Obstsalat", 4.30f);		dessert.setIngredients(ingredients);		dishes.add(dessert);		ingredients = new String[] { "Sahne" };		dessert = new DessertVO(22, "Hausgemachte Pannacotta", 5.60f);		dessert.setIngredients(ingredients);		dishes.add(dessert);		ingredients = new String[] { "Sahne", "Kaffee" };		dessert = new DessertVO(23, "Hausgemachtes Tiramisu", 4.80f);		dessert.setIngredients(ingredients);		dishes.add(dessert);		myMenu = new MenuVO(dishes);//		System.out.println(myMenu);				menuWriter = new MenuWriter(myMenu);		try {			menuWriter.writeMenu(file, "My little test menu");		} catch (IOException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}	}	@Test	@DisplayName("MenuImporter reads all dishes correctly")	public void testMenuImporterRead() throws FileNotFoundException, IOException {		MenuImporter importer;		importer = new MenuImporter();		readMenu = importer.readMenu(file);		assertTrue(myMenu.getNumberOfDishes() == readMenu.getNumberOfDishes(), "read number of dishes correctly");		for (int i = 0; i < readMenu.getNumberOfDishes(); i++) {			assertTrue(readMenu.getDish(i).equals(myMenu.getDish(i)), "read all dishes correctly");		}	}	@Test	@DisplayName("No such file and MenuImporter throws FileNotFoundException")	public void testMenuImporterReadFileNotFoundException() throws IOException {		MenuImporter importer;		importer = new MenuImporter();		Exception exception = Assertions.assertThrows(FileNotFoundException.class,				() -> importer.readMenu("blabla.txt"));		assertTrue(exception.getMessage().contains("blabla.txt"));	}		@Test	@DisplayName("MenuImporter reads correctly from corrupted file, i.e. ingredients are missing")	public void testMenuImporterReadCorruptedFile() throws FileNotFoundException, IOException {		MenuImporter importer;		ArrayList<DishVO> dishes = new ArrayList<DishVO>();		String[] ingredients;		DessertVO dessert;		ingredients = new String[] { "Schinken", "Spinat", "Champignon", "Ei" };		dishes.add(new PizzaVO(30, "Popey", ingredients, 8.50f, 1));		ingredients = new String[] { "Hackfleisch", "Tomaten", "Parmesan" };		dishes.add(new PastaVO(13, "Bolognese", ingredients, 6.50f, 4));		dishes.add(new DessertVO(21, "Hausgemachtes Tiramisu", 4.40f));		ingredients = new String[] { "Obst", "Mandeln" };		dessert = new DessertVO(22, "Obstsalat", 4.4f);		dessert.setIngredients(ingredients);		dishes.add(dessert);		importer = new MenuImporter();		readMenu = importer.readMenu("test/myLittleMenuCorrupted.json");		for (int i = 0; i < readMenu.getNumberOfDishes(); i++) {			Assertions.assertEquals(dishes.get(i), readMenu.getDish(i), "Dish read incorrectly");		}	}	@Test	@DisplayName("MenuImporter reads correctly from damaged file, i.e. \"dish.nr:\" is  missing and is set 0")	public void testMenuImporterReadDamagedFile() throws FileNotFoundException, IOException {		MenuImporter importer;		ArrayList<DishVO> dishes = new ArrayList<DishVO>();		String[] ingredients;		DessertVO dessert;		ingredients = new String[] { "Schinken", "Spinat", "Champignon", "Ei" };		dishes.add(new PizzaVO(30, "Popey", ingredients, 8.50f, 1));		ingredients = new String[] { "Hackfleisch", "Tomaten", "Parmesan" };		dishes.add(new PastaVO(13, "Bolognese", ingredients, 0f, 4));		dishes.add(new DessertVO(0, "Hausgemachtes Tiramisu", 4.40f));		ingredients = new String[] { "Obst", "Mandeln" };		dessert = new DessertVO(22, "Obstsalat", 0f);		dessert.setIngredients(ingredients);		dishes.add(dessert);		importer = new MenuImporter();		JSONException thrown = assertThrows(JSONException.class, ()-> readMenu = importer.readMenu("test/myLittleMenuDamaged.json"));		//readMenu = importer.readMenu("test/myLittleMenuDamaged.txt");				//for (int i = 0; i < readMenu.getNumberOfDishes(); i++) {		//	System.out.println(readMenu.getDish(i));		//	System.out.println(dishes.get(i));			//assertTrue(readMenu.getDish(i).equals(dishes.get(i)), "read all dishes correctly");		//}	}	static class MenuWriter {		MenuVO menu;		public MenuWriter(MenuVO menu) {			this.menu = menu;		}		public MenuWriter() {			this(null);		}		public void writeMenu(String fileName, String title) throws IOException, FileNotFoundException {			//StringBuilder sb = new StringBuilder();			DishVO currentDish = null;			JSONObject currentJsonDish = null;						/*			sb.append("dishes:" + title + "\n");			String ingredients[] = null;						BufferedWriter textFile = new BufferedWriter(new FileWriter(new File(fileName)));			for (int i = 0; i < menu.getNumberOfDishes(); ++i) {				sb.append("\n");				currentDish = menu.getDish(i);				if (currentDish instanceof PizzaVO) {					sb.append("dish.type:Pizza\n");					sb.append("dish.nr:" + currentDish.getNumber() + "\n");					sb.append("dish.name:" + currentDish.getName() + "\n");					sb.append("dish.size:" + ((PizzaVO) currentDish).getSize() + "\n");					sb.append("dish.price:" + currentDish.getPrice() + "\n");				}				if (currentDish instanceof PastaVO) {					sb.append("dish.type:Pasta\n");					sb.append("dish.nr:" + currentDish.getNumber() + "\n");					sb.append("dish.name:" + currentDish.getName() + "\n");					sb.append("dish.typeOfPasta:" + ((PastaVO) currentDish).getTypeOfPasta() + "\n");					sb.append("dish.price:" + currentDish.getPrice() + "\n");				}				if (currentDish instanceof DessertVO) {					sb.append("dish.type:Dessert\n");					sb.append("dish.nr:" + currentDish.getNumber() + "\n");					sb.append("dish.name:" + currentDish.getName() + "\n");					sb.append("dish.price:" + currentDish.getPrice() + "\n");				}				ingredients = currentDish.getIngredients();				for (String s : ingredients) {					sb.append("dish.ingredient:" + s + "\n");				}			}						textFile.write(sb.toString());			textFile.close();			*/						JSONObject jsonMenu = new JSONObject();			jsonMenu.put("name", title);			JSONArray jsonDishes = new JSONArray();			for (int i = 0; i < menu.getNumberOfDishes(); ++i) {				currentDish = menu.getDish(i);				currentJsonDish = new JSONObject();				if (currentDish instanceof PizzaVO) {					currentJsonDish.put("type", "Pizza");					currentJsonDish.put("size", ((PizzaVO) currentDish).getSize());				}				if (currentDish instanceof PastaVO) {					currentJsonDish.put("type", "Pasta");					currentJsonDish.put("typeOfPasta", ((PastaVO) currentDish).getTypeOfPasta());				}				if (currentDish instanceof DessertVO) {					currentJsonDish.put("type", "Dessert");				}				currentJsonDish.put("nr", currentDish.getNumber());				currentJsonDish.put("name", currentDish.getName());				currentJsonDish.put("price", currentDish.getPrice());								//ingredients				currentJsonDish.put("ingredients", new JSONArray(currentDish.getIngredients()));				jsonDishes.put(currentJsonDish);			}			jsonMenu.put("dishes", jsonDishes);	        			//String fileText= new String(os.readAllBytes(), StandardCharsets.UTF_8);			Writer w = new FileWriter(new File(file));			jsonMenu.write(w);						w.close();					}	}}